spec_version: 1
settings:
  on_missing_source: error
  output_conflict: error
  default_fillna: null

steps:
  # street
  - id: street
    type: simple
    enabled: true
    source: streetAddress
    output: street
    method: extract_street
    config: { unknown_value: "Unknown" }

  # 1) Temporal / Market Trend Features
  - id: month_index
    type: simple
    enabled: true
    source: saleYearMonth
    output: month_id
    method: to_month_index
    config: { offset: 0 }

  - id: month_cyclical
    type: simple
    enabled: true
    source: saleMonth
    output: [saleMonth_sin, saleMonth_cos]
    method: cyclical_encode
    config: { period: 12 }

  - id: map_property_type_to_tag
    type: simple
    enabled: true
    source: propertyType
    output: property_type_tag
    method: map_values
    config:
      mapping: { HOUSE: house, TOWNHOUSE: house }
      default: other

  - id: suburb_time_agg_3m
    type: time_aggregate
    enabled: true
    group_by: [suburb, property_type_tag]
    time_col: saleYearMonth
    target: salePrice
    window: { past: 3, future: 0, unit: months }
    outputs:
      median: suburb_price_median_3m
      count: suburb_txn_count_3m

  - id: suburb_time_agg_6m
    type: time_aggregate
    enabled: true
    group_by: [suburb, property_type_tag]
    time_col: saleYearMonth
    target: salePrice
    window: { past: 6, future: 0, unit: months }
    outputs:
      median: suburb_price_median_6m
      count: suburb_txn_count_6m

  - id: suburb_time_agg_12m
    type: time_aggregate
    enabled: true
    group_by: [suburb, property_type_tag]
    time_col: saleYearMonth
    target: salePrice
    window: { past: 12, future: 0, unit: months }
    outputs:
      median: suburb_price_median_12m
      count: suburb_txn_count_12m

  # 2) Property Size & Density Ratios
  - id: ratio_land_per_bed
    type: simple
    enabled: true
    output: ratio_land_per_bed
    method: expr
    config:
      expr: "landSizeM2 / nullif(bed + 1, 0)"

  - id: ratio_floor_per_bed
    type: simple
    enabled: true
    output: ratio_floor_per_bed
    method: expr
    config:
      expr: "floorSizeM2 / nullif(bed + 1, 0)"

  - id: ratio_car_per_bed
    type: simple
    enabled: true
    output: ratio_car_per_bed
    method: expr
    config:
      expr: "car / nullif(bed + 1, 0)"

  - id: ratio_bed_bath
    type: simple
    enabled: true
    output: ratio_bed_bath
    method: expr
    config:
      expr: "bed / nullif(bath + 1, 0)"

  - id: price_per_area_land
    type: simple
    enabled: true
    output: price_per_sqm_land
    method: expr
    config:
      expr: "clip(salePrice / nullif(landSizeM2, 0), 0, None)"

  - id: price_per_area_floor
    type: simple
    enabled: true
    output: price_per_sqm_floor
    method: expr
    config:
      expr: "clip(salePrice / nullif(floorSizeM2, 0), 0, None)"

  # 3b) Macroeconomic enrichment
  - id: macro_join
    type: join
    enabled: true
    right: macro_au_annual                 # runtime dataset keyed to the CSV path
    how: left
    on:
      - { left: saleYear, right: year }
    select:
      - asx200_close
      - asx200_yoy
      - cpi_index_dec
      - cpi_yoy_dec
      - cpi_index_avg
      - cpi_yoy_avg
      - cash_rate_avg
      - cash_rate_eoy
      - cash_rate_change_avg
      - cash_rate_change_eoy

  # 3) Relative Pricing
  - id: suburb_price_current
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: salePrice
    outputs:
      median: suburb_price_median_current

  - id: region_price_current
    type: aggregate
    enabled: true
    group_by: [region]
    target: salePrice
    outputs:
      median: region_price_median_current

  - id: street_price_current
    type: aggregate
    enabled: true
    group_by: [suburb, street]
    target: salePrice
    outputs:
      median: street_price_median_current
    config: { min_count: 5 }

  - id: rel_price_suburb
    type: simple
    enabled: true
    output: rel_price_suburb
    method: expr
    config:
      expr: "(salePrice - suburb_price_median_current) / nullif(suburb_price_median_current, 0)"

  - id: rel_price_region
    type: simple
    enabled: true
    output: rel_price_region
    method: expr
    config:
      expr: "(salePrice - region_price_median_current) / nullif(region_price_median_current, 0)"

  - id: rel_price_street
    type: simple
    enabled: true
    output: rel_price_street
    method: expr
    config:
      expr: "(salePrice - street_price_median_current) / nullif(street_price_median_current, 0)"

  # 4) Age & Vintage
  - id: property_age
    type: simple
    enabled: true
    output: propertyAge
    method: expr
    config:
      expr: "max(saleYear - yearBuilt, 0)"

  - id: age_bands
    type: bin
    enabled: true
    source: propertyAge
    output: propertyAgeBand
    method: fixed
    config:
      edges: [5, 20]                     # produces "0–5", "6–20", "21+"
      labels: ["0–5", "6–20", "21+"]

  # 5) Configurable Buckets for Segmenting Properties
  - id: bed_bucket
    type: bin
    enabled: true
    source: bed
    output: bed_bucket
    method: fixed
    config:
      edges: [2, 3, 4]
      labels: ["<=2", "3", "4", "5+"]
      fill_value: "Unknown"

  - id: bath_bucket
    type: bin
    enabled: true
    source: bath
    output: bath_bucket
    method: fixed
    config:
      edges: [1, 2, 3]
      labels: ["0-1", "2", "3", "4+"]
      fill_value: "Unknown"

  - id: land_bucket
    type: bin
    enabled: true
    source: landSizeM2
    output: land_bucket
    method: fixed
    config:
      edges: [400, 700]
      labels: ["<=400", "401-700", "700+"]
      fill_value: "Unknown"

  - id: floor_bucket
    type: bin
    enabled: true
    source: floorSizeM2
    output: floor_bucket
    method: fixed
    config:
      edges: [150, 220]
      labels: ["<=150", "151-220", "220+"]
      fill_value: "Unknown"

  # 7) Aggregations for Segment-Level Features
  - id: current_price_median
    type: aggregate
    enabled: true
    group_by: [suburb]                   # segment keys to be aligned with your usage
    target: salePrice
    outputs: { median: current_price_median }

  - id: current_price_mean
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: salePrice
    outputs: { mean: current_price_mean }

  - id: transaction_count
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: salePrice
    outputs: { count: transaction_count }

  - id: avg_land_size
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: landSizeM2
    outputs: { mean: avg_land_size }

  - id: avg_floor_size
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: floorSizeM2
    outputs: { mean: avg_floor_size }

  - id: ratio_land_per_bed_mean
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: ratio_land_per_bed
    outputs: { mean: ratio_land_per_bed }

  - id: ratio_floor_per_bed_mean
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: ratio_floor_per_bed
    outputs: { mean: ratio_floor_per_bed }

  - id: ratio_car_per_bed_mean
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: ratio_car_per_bed
    outputs: { mean: ratio_car_per_bed }

  - id: ratio_bed_bath_mean
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: ratio_bed_bath
    outputs: { mean: ratio_bed_bath }

  - id: price_per_sqm_land_median
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: price_per_sqm_land
    outputs: { median: price_per_sqm_land }

  - id: price_per_sqm_floor_median
    type: aggregate
    enabled: true
    group_by: [suburb]
    target: price_per_sqm_floor
    outputs: { median: price_per_sqm_floor }

  # carry: macro columns already joined; nothing else to configure here

  # 8) Future Targets (shifted horizons)
  - id: price_future_6m
    type: time_aggregate
    enabled: true
    group_by: [suburb]
    time_col: month_id
    target: salePrice
    window: { past: 0, future: 6, unit: months }
    outputs: { median: price_future_6m }

  - id: price_future_6m_delta
    type: simple
    enabled: true
    output: price_future_6m_delta
    method: expr
    config:
      expr: "(price_future_6m - current_price_median) / nullif(current_price_median, 0)"

  - id: price_future_6m_diff
    type: simple
    enabled: true
    output: price_future_6m_diff
    method: expr
    config:
      expr: "price_future_6m - current_price_median"

  - id: price_future_12m
    type: time_aggregate
    enabled: true
    group_by: [suburb]
    time_col: month_id
    target: salePrice
    window: { past: 0, future: 12, unit: months }
    outputs: { median: price_future_12m }

  - id: price_future_12m_delta
    type: simple
    enabled: true
    output: price_future_12m_delta
    method: expr
    config:
      expr: "(price_future_12m - current_price_median) / nullif(current_price_median, 0)"

  - id: price_future_12m_diff
    type: simple
    enabled: true
    output: price_future_12m_diff
    method: expr
    config:
      expr: "price_future_12m - current_price_median"

  - id: price_future_12m_smooth
    type: rolling
    enabled: true
    group_by: [suburb]
    sort_by: month_id
    target: price_future_12m
    window: 12
    outputs: { mean: price_future_12m_smooth }
    config: { min_periods: 6, center: false }

  - id: price_future_12m_smooth_delta
    type: simple
    enabled: true
    output: price_future_12m_smooth_delta
    method: expr
    config:
      expr: "(price_future_12m_smooth - current_price_median) / nullif(current_price_median, 0)"

  - id: price_future_12m_smooth_diff
    type: simple
    enabled: true
    output: price_future_12m_smooth_diff
    method: expr
    config:
      expr: "price_future_12m_smooth - current_price_median"
